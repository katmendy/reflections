1) What happens when you initialize a repository? Why do you need to do it?

When you initialize a git repository, it creates a .git folder in your current directory. You need to do this so that you can add and commit files to a local repository and keep track of all the changes that you commit.

2) How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is different from the working directory because can be committed to your local repository. It is different from the repository because it is not recorded in the log yet. It is valuable to utilize the staging area because it allows you to customize which changes you commit so that your commit messages can be meaningful and help during debugging.

3) How can you use the staging area to make sure you have one commit per logical change?

If you only want to commit changes to certain files, you can just git add <filename> for each file. When you have all of the files that you want to change staged, you can then commit with a meaningful message.

4) What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches would be helpful when experimenting with new features such as a nnew functionality or a new language, as described in the lesson. Branches would help because it would allow me to make changes without the fear of breaking the code. Additionally, I would still have access to the master branch, so I could continue to edit and improve it. If I want to combine two branches, merging lets me do so easily.

5) How do the diagrams help you visualize the branch structure?

Diagrams help identify parent commits and what branches each change will effect. It also helps to indenitfy unreachable commits. It shows visually what branches you have access to, and the commits that each branch contains.
